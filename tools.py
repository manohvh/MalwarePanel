#!/usr/bin/env python3

#  @AUTHOR: https://github.com/codeuk
#  forgive my horribly written code pls

import time, random, string
from os import system, name
from requests import get, post
from base64 import urlsafe_b64encode
from cryptography.fernet import Fernet, InvalidToken
from cryptography.hazmat.backends import default_backend
from cryptography.hazmat.primitives import hashes
from cryptography.hazmat.primitives.kdf.pbkdf2 import PBKDF2HMAC

class Settings:
    """ Default admin credentials - CHANGE THESE! """
    ADMIN_USER = "admin"
    ADMIN_PASS = "12345"

    """ Allows you to recieve connections across the internet, not just locally """
    USE_LOCALTUNNEL = True

    """ Enables testing features (add random users/admins) which may be open to exploits
    - as they don't require authorization codes when making requests """
    TESTING_MODE = True

    """ Uses simple styling with Jinja2 to change the panel colors """
    PANEL_COLOR = "#28242c" # don't change manually

    """ Master key for data encryption """
    MASTER_KEY = "__codeuk__"

class Colors:
    """ Theme Colors """
    c = {
        "green":"#068c13",
        "dark": "#28242c",
        "blue": "#4e49de",
        "red":  "#f05462",
    }

class Encryption:
    """ Functions relating to generating keys and encrypting/decrypting user data """

    def __init__(enc, salt, master_key):
        enc.salt = salt 
        enc.key  = master_key

    @staticmethod
    def GenerateKey(enc):
        """ Generate encryption key with master_key and salt """
        kdf = PBKDF2HMAC(
            algorithm=hashes.SHA256(),
            length=32,
            salt=enc.salt,
            iterations=100000,
            backend=default_backend()
        )
        key = urlsafe_b64encode(kdf.derive(enc.key.encode()))
        return key

    @staticmethod
    def Encrypt(key, value):
        """ Encrypt value with Fernet and MASTER_KEY """
        try:
            f = Fernet(key)
            encrypted_key = f.encrypt(value.encode())
            return encrypted_key
        finally:
            print(f"encrypt call for -> {value}")

    @staticmethod
    def Decrypt(key, value):
        """ Decrypt value with Fernet and MASTER_KEY """
        f = Fernet(key)
        try:
            return f.decrypt(value.encode())
        except InvalidToken:
            return b''
        finally:
            print(f"decrypt call for -> {value}")

class Static:
    """ Tools able to be used statically and don't interact with the database """

    @staticmethod
    def IP2Info(ip) -> list:
        """ Get Full IP Information """
        api = f'http://ipwho.is/{ip}'
        info = get(api)
        return info.json()

    @staticmethod
    def Clear() -> None:
        system('cls' if name == 'nt' else 'clear') 

        print("""
            ┌─┐┌─┐┬─┐┬  ┬┌─┐┬─┐  ┌─┐┌┬┐┌─┐┬─┐┌┬┐┌─┐┌┬┐          
    ──────  └─┐├┤ ├┬┘└┐┌┘├┤ ├┬┘  └─┐ │ ├─┤├┬┘ │ ├┤  ││  ──────  
            └─┘└─┘┴└─ └┘ └─┘┴└─  └─┘ ┴ ┴ ┴┴└─ ┴ └─┘─┴┘          
        """)

    @staticmethod
    def RandomUserInfo() -> list:
        """ Generate information for bot accounts """
        username = ''.join(random.choices(string.ascii_lowercase, k=6))
        password = ''.join(random.choices(string.ascii_uppercase, k=8))
        return username, password

    @staticmethod
    def GetTime() -> str:
        """ Get and format local time """
        time_unfiltered = time.gmtime(time.time())
        formatted_time = time.strftime("%Y-%m-%d %H:%M:%S", time_unfiltered)
        return formatted_time
    
    @staticmethod
    def FormatData(strlist) -> list:
        """ Format post data (stringlist) to array """
        temp_list = []
        seperator = "%"
        for value in strlist.split(seperator):
            if value == "": continue
            temp_list.append(value)
        return temp_list
