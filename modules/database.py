
from .static  import Static
from typing   import Optional
from requests import get, post

class User:
    """ User data class """

    def __init__(
        usr:       object,
        id:        int,
        username:  str,
        token:     str,
        password:  Optional[str]  = None,
        ip:        Optional[str]  = "localhost",
        sysinfo:   Optional[str]  = "localhost",
        ram:       Optional[int]  = 0,
        cores:     Optional[int]  = 0,
        pcname:    Optional[int]  = 0,
        localmacs: Optional[list] = [],
        localips:  Optional[list] = [],
        admin:     Optional[bool] = False,
        bot:       Optional[bool] = False,
    ):
        # usr.enc = Encryption(
        #     os.urandom(16),
        #     Settings.MASTER_KEY
        # )
        usr.username = username
        usr.password = password
        usr.admin = admin
        usr.token = token
        usr.bot = bot
        usr.id  = id
        usr.ip  = ip
        usr.ram = ram
        usr.cores  = cores
        usr.pcname = pcname
        usr.added  = Static.GetTime()
        usr.location, usr.countryflag = usr.IP2Location(usr.ip)
        if not bot and not usr.admin:
            usr.ipinfo  = Static.IP2Info(ip)
            usr.sysinfo = Static.FormatData(sysinfo)
            usr.localmacs = Static.FormatData(localmacs)
            usr.localips  = Static.FormatData(localips)
            usr.localorgs = usr.MacVendors()
        else:
            usr.ipinfo, usr.sysinfo, usr.localmacs, \
                usr.localips, usr.localorgs = (None,)*5

    def MacVendors(usr) -> list:
        """ Get vendor for each MAC address """
        temp_list = []
        for mac in usr.localmacs:
            r = get(f"http://api.macvendors.com/{mac}")
            vendor = r.text if r.status_code == 200 else None
            temp_list.append(vendor)
        return temp_list

    def IP2Location(usr, ip: str, json: bool=False) -> list:
        """ Get IP GeoLocation and Flag image from ipwho.is API """
        if not usr.admin and not usr.bot:
            api = f'http://ipwho.is/{ip}'
            r = get(api).json()
            if json: return r
            else: return r['country'], r['flag']['img']
        return "Unknown", "https://i.pinimg.com/originals/0c/b2/36/0cb236777f219f7ddb6d21a8ac7ff2fa.png"

    @staticmethod
    def VerifyAuth(auth) -> bool:
        """ Check if auth in header is valid """
        if auth in DB.authcodes:
            return True
        else: return False

    @staticmethod
    def GenerateUserInfo() -> list:
        """ Return user token and id """
        temp_token = Static.RandomUserInfo()[0]
        temp_usrid = len(DB.userlist)+1
        return temp_token, temp_usrid

    def __repr__(usr):
        return f"<{usr.username}@{usr.token}>"

class DB:
    """ Database storage for users, admins and authentication codes """

    authcodes = ["standardAuth"]
    names     = []
    userlist  = []
    adminlist = []
    socketclients = []