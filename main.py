#!/usr/bin/env python3

#  @AUTHOR: https://github.com/codeuk
#  forgive my horribly written code pls

import os
import string
import random
import requests
from localtunnel.main import start as localtunnel

from flask import (
    Flask,
    g,
    redirect,
    render_template,
    request,
    session,
    url_for
)

from tools import (
    Encryption,
    Settings,
    Colors,
    Static
)

class User:
    """ User data class """

    def __init__(
        usr, id, username, token, password=None, ip="localhost",
        ram=0, localmacs=None, localips=None, cores=None, pcname=None,
        sysinfo=None, admin=False, bot=False
    ):
        usr.enc = Encryption(
            os.urandom(16),
            Settings.MASTER_KEY
        )

        """ Account related information """
        usr.username = username
        usr.password = password
        usr.admin = admin
        usr.token = token
        usr.bot = bot
        usr.id  = id

        """ Machine related information """
        usr.ip = ip
        usr.ram = ram
        usr.cores = cores
        usr.pcname = pcname
        usr.location, usr.countryflag = usr.IP2Location(usr.ip)
        usr.ipinfo = Tools.IP2Info(ip) if not bot and not usr.admin else None
        usr.sysinfo = Static.FormatData(sysinfo) if not bot and not usr.admin else None
        usr.localmacs = Static.FormatData(localmacs) if not bot and not usr.admin else None
        usr.localips  = Static.FormatData(localips) if not bot and not usr.admin else None
        usr.localorgs = usr.MacVendors() if not bot and not usr.admin else None
        usr.added = Static.GetTime() if not bot and not usr.admin else None

    def MacVendors(usr) -> list:
        """ Get vendor for each MAC address """
        temp_list = []
        for mac in usr.localmacs:
            r = requests.get(f"http://api.macvendors.com/{mac}")
            vendor = r.text if r.status_code == 200 else None
            temp_list.append(vendor)
        return temp_list

    def IP2Location(usr, ip, json=False) -> list:
        """ Get IP GeoLocation and Flag image from ipwho.is API """
        if not usr.admin and not usr.bot:
            api = f'http://ipwho.is/{ip}'
            r = requests.get(api).json()
            if json: return r
            else: return r['country'], r['flag']['img']
        return "Unknown", "https://cdn-icons-png.flaticon.com/512/16/16268.png"

    def __repr__(usr):
        return f"<{usr.username}@{usr.token}>"

class Database:
    """ Database storage for users, admins and authentication codes """

    userlist = []
    adminlist = []
    auth_codes = ["standardAuth"] # I recommend changing this auth-code as it's the default

    userlist.append(User(
        id=1,
        username=Settings.ADMIN_USER,
        password=Settings.ADMIN_PASS,
        admin=True,
        token="DEFAULT"
    ))

db = Database()

class Tools:
    """ Tools to help with user info & authentication """

    def __init__(tl):
        tl.names = []

    @staticmethod
    def VerifyAuth(auth) -> bool:
        """ Check if auth in header is valid """
        if auth in db.auth_codes:
            return True
        else: return False

    @staticmethod
    def GenerateUserInfo() -> list:
        """ Return user token and id """
        temp_token = ''.join(random.choices(string.ascii_uppercase, k=6))
        temp_usrid = len(db.userlist)+1
        return temp_token, temp_usrid

    def AddNewUser(
        tl, username, password=None, ip="localhost",
        ram=0, localmacs=None, localips=None, cores=None,
        sysinfo=None, pcname=None, admin=False, bot=False
    ) -> bool:
        """ Validate and add new user to db """
        if tl.VerifyAccount(username, admin):
            token, _id = tl.GenerateUserInfo()
            db.userlist.append(User(
                id=_id,
                username=username,
                password=password,
                token=token,
                admin=admin,
                pcname=pcname,
                localmacs=localmacs,
                localips=localips,
                sysinfo=sysinfo,
                cores=cores,
                ram=ram,
                bot=bot,
                ip=ip
            ))
            return True
        return False

    def VerifyAccount(tl, username, admin) -> bool:
        """ Check if account info is valid """
        if admin and len(db.adminlist) >= 6:
            return False
        if (
            username not in tl.names
            and username != None
            and len(username) >= 3
            and len(username) <= 12
        ):
            tl.names.append(username)
            return True
        return False

con = Flask(__name__)
con.secret_key = "**__super_secret_key__**"

@con.before_request
def before_request():
    g.user = None

    if 'user_id' in session:
        user = [x for x in db.userlist if x.id == session['user_id']][0]
        g.user = user

@con.route('/')
@con.route('/dashboard', methods=['GET'])
def dashboard():
    if not g.user:
        return redirect(url_for('login'))

    users = db.userlist
    admins = db.adminlist
    amount = len(users)
    auth_amt = len(db.auth_codes)

    for i, user in enumerate(users):
        if users[i].admin and user not in admins: 
            db.adminlist.append(user)

    return render_template(
        'dashboard.html',
        admins=len(admins),
        adminlist=admins,
        users= enumerate(users),
        list=users,
        auths=db.auth_codes,
        auth_amt=auth_amt,
        amount=amount,
        version="0.1",
        theme=Settings.PANEL_COLOR
    )

@con.route('/dashboard', methods=['POST'])
def new_auth_code():
    auth = request.form['authcode']
    if len(db.auth_codes)<6:
        db.auth_codes.append(auth)
    return redirect(url_for('dashboard'))

@con.route('/login', methods=['GET', 'POST'])
def login():
    if request.method=='POST':
        session.pop('user_id', None)

        username = request.form['username']
        password = request.form['password']

        try:
            user = [u for u in db.userlist if u.username == username][0]
            pwd  = [p for p in db.userlist if p.password == password][0]
        except IndexError:
            return redirect(url_for('login'))
        finally:
            print(f"new login from user -> {user.username}")

        if user and pwd:
            session['user_id'] = user.id
            return redirect(url_for('dashboard'))
        return redirect(url_for('login'))
    return render_template('login.html')

@con.route('/users/')
@con.route('/users', methods=['GET'])
def display_users():
    if not g.user:
        return redirect(url_for('login'))

    users = db.userlist
    _len  = len(users)

    return render_template(
        'users.html',
        title= 'Connected Machines',
        users= enumerate(users),
        amount=_len,
        list = users,
        theme=Settings.PANEL_COLOR
    )

@con.route('/user/<id>')
@con.route('/users/<id>', methods=['GET'])
def user_profile(id):
    if not g.user:
        return redirect(url_for('login'))
    try:
        user = db.userlist[int(id)-1]
        return render_template('user.html', user=user, theme=Settings.PANEL_COLOR)
    except Exception as e:
        return render_template(
            'error.html',
            error=f"Invalid User ID Passed: {id}",
            theme=Settings.PANEL_COLOR
        )

@con.route('/settings/')
@con.route('/settings', methods=['GET'])
def settings():
    if not g.user:
        return redirect(url_for('login')) 
    return render_template('settings.html', theme=Settings.PANEL_COLOR)

@con.route('/settings/lt', methods=['POST'])
def change_localtunnel():
    if request.form['use_lt']=="ON":
        Settings.USE_LOCALTUNNEL = True
        localtunnel(con)
    else: Settings.USE_LOCALTUNNEL = False

    return redirect(url_for('settings'))

@con.route('/settings/tm', methods=['POST'])
def change_testmode():
    if request.form['use_tm']=="OFF":
        Settings.TESTING_MODE = False
    else:
        return render_template(
            'error.html',
            error="You can't turn this on through the panel \
            for safety purposes, please do it manually.",
            theme=Settings.PANEL_COLOR
        )

    return redirect(url_for('settings'))

@con.route('/newtheme', methods=['POST'])
def change_theme():
    new_color = request.form['theme_color'].lower()
    Settings.PANEL_COLOR = Colors.c[new_color]

    return redirect(url_for('settings'))

# currently not working (backend works fine but front end isn't updating)
@con.route('/delAdmin/<int:id>', methods=['GET'])
def deleteadmin(id):
    if not g.user:
        return redirect(url_for('login'))
    if id == 1:
        return render_template(
            'error.html',
            error="You cannot delete the default admin account",
            theme=Settings.PANEL_COLOR
        )
    try:
        db.userlist.pop(int(id)-1)
        return redirect(url_for('dashboard'))
    except:
        return render_template(
            'error.html',
            error="Invalid Admin ID",
            theme=Settings.PANEL_COLOR
        )

"""
Connector Panel API
"""

@con.route('/api/ip/<ip>')
@con.route('/api/iplookup/<ip>', methods=['GET'])
def ip_lookup(ip):
    info = Tools.IP2Info(ip)
    return info

@con.route('/api/lookup', methods=['POST'])
def user_lookup():
    id = request.form['uid']
    try:
        user = db.userlist[int(id)-1]
        return render_template('user.html', user=user, theme=Settings.PANEL_COLOR)
    except Exception as e:
        return render_template(
            'error.html',
            error=f"Invalid User ID Passed: {id}",
            theme=Settings.PANEL_COLOR
        )

@con.route('/api/adduser', methods=['POST'])
def adduser():
    req = request.get_json()
    auth = request.headers.get("auth")

    if Tools.VerifyAuth(auth):
        new_user = Tools().AddNewUser(
            username=req['username'],
            ip=req['ip'],
            pcname=req['pcname'],
            cores=req['cores'],
            localmacs=req['localmacs'],
            localips=req['localips'],
            sysinfo=req['sysinfo'],
            ram=req['ram']
        )
        return f"user added: {new_user}"
    else: return "invalid authorization"

@con.route('/api/addAdmin', methods=['POST'])
def addadmin():
    auth = request.form['auth']
    username = request.form['admin_username']
    password = request.form['admin_password']
    if Tools.VerifyAuth(auth):
        new_admin = Tools().AddNewUser(
            username=username,
            password=password,
            admin=True
        )
    return redirect(url_for('dashboard'))

""" TESTING_MODE Functions - TESTING_MODE needs to be set to True for these to be used! """
@con.route('/rndAdmin', methods=['GET'])
def rndadmin():
    if Settings.TESTING_MODE:
        username, password = Static.RandomUserInfo()
        new_admin = Tools().AddNewUser(
            username=username,
            password=password,
            admin=True,
            bot=True
        )
        return redirect(url_for('dashboard'))
    else:
        return render_template(
            'error.html',
            error="This feature only works in testing mode",
            theme=Settings.PANEL_COLOR
        )

@con.route('/rndUser', methods=['GET'])
def rnduser():
    if Settings.TESTING_MODE:
        username, _ = Static.RandomUserInfo()
        new_admin = Tools().AddNewUser(
            username=username,
            bot=True
        )
        return redirect(url_for('dashboard'))
    else:
        return render_template(
            'error.html',
            error="This feature only works in testing mode",
            theme=Settings.PANEL_COLOR
        )

if __name__ == '__main__':
    Static.Clear()
    if Settings.USE_LOCALTUNNEL:
        localtunnel(con)
    con.run(
        host='0.0.0.0',
        port=80,
        debug=True
    )
