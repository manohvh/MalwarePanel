import os, string, random, time, requests
from localtunnel.main import start as localtunnel
from flask import (
    Flask,
    g,
    redirect,
    Response,
    render_template,
    request,
    session,
    url_for
)

""" This enables testing features (add random users/admins) which may be open to exploits
 - as they don't require authorization codes when making requests """
TESTING_MODE = True

""" This allows you to recieve connections across the internet, not just locally """
USE_LOCALTUNNEL = False

""" Default admin credentials """
ADMIN_USER = "admin"
ADMIN_PASS = "12345"

class User:
    """ User data class """

    def __init__(
        usr, id, username, token, password=None,
        ip=None, pcname=None, admin=False, bot=False
    ):
        """ Account related information """
        usr.username = username
        usr.password = password
        usr.admin = admin
        usr.token = token
        usr.bot = bot
        usr.id  = id

        """ Machine related information """
        usr.ip = ip if not bot and not usr.admin else "1.1.1.1"
        usr.pcname = pcname if not bot else ''.join(random.choices(string.ascii_uppercase, k=4))
        usr.added  = usr.GetTime() 
        usr.location = usr.IP2Location()[0]
        usr.countryflag = usr.IP2Location()[1]

    @staticmethod
    def GetTime() -> str:
        time_now = time.gmtime(time.time())
        formatted_time = time.strftime("%Y-%m-%d %H:%M:%S", time_now)
        return formatted_time

    def IP2Location(usr) -> str:
        """ Get IP GeoLocation and Flag image from ipwho.is API """
        if not usr.admin and not usr.bot:
            api = f'http://ipwho.is/{usr.ip}'
            r = requests.get(api).json()
            return r['country'], r['flag']['img']
        return "Unknown", "Unknown"

    def __repr__(usr):
        return f"<User {usr.username}>"

class Database:
    """ Database storage for users, admins and authentication codes """

    userlist = []
    adminlist = []
    auth_codes = ["standardAuth"]

    userlist.append(User(
        id=1,
        username=ADMIN_USER,
        password=ADMIN_PASS,
        admin=True,
        token="AABBCC"
    ))

db = Database()

class Tools:
    """ Tools to help with user info & authentication """

    def __init__(tl):
        tl.names = []

    @staticmethod
    def VerifyAuth(auth) -> bool:
        """ Check if auth in header is valid """
        if auth in db.auth_codes:
            return True
        else: return False

    @staticmethod
    def RandomUserInfo() -> list:
        username = ''.join(random.choices(string.ascii_lowercase, k=6))
        password = ''.join(random.choices(string.ascii_uppercase, k=8))
        return username, password

    def GenerateUserInfo(tl) -> list:
        """ Return user token and id """
        temp_token = ''.join(random.choices(string.ascii_uppercase, k=6))
        temp_usrid = len(db.userlist)+1
        return temp_token, temp_usrid

    def AddNewUser(tl, username, password=None, admin=False, ip=None, pcname=None, bot=False) -> bool:
        """ Validate and add new user to db """
        if tl.VerifyAccount(username, admin):
            token, _id = tl.GenerateUserInfo()
            db.userlist.append(User(
                id=_id,
                username=username,
                password=password,
                token=token,
                admin=admin,
                pcname=pcname,
                bot=bot,
                ip=ip
            ))
            return True
        return False

    def VerifyAccount(tl, username, admin) -> bool:
        """ Check if account info is valid """
        if admin and len(db.adminlist) >= 6:
            return False
        if username not in tl.names and username!=None and len(username)>=3 and len(username) <= 12:
            tl.names.append(username)
            return True
        return False

tl = Tools()

con = Flask(__name__)
con.debug = True
con.secret_key = "SuperSecret_key__hd(O$U8yfSHD"

if USE_LOCALTUNNEL:
    localtunnel(con)

@con.before_request
def before_request():
    g.user = None

    if 'user_id' in session:
        user = [x for x in db.userlist if x.id == session['user_id']][0]
        g.user = user

@con.route('/')
@con.route('/dashboard', methods=['GET'])
def dashboard():
    if not g.user:
        return redirect(url_for('login'))

    users = db.userlist
    admins = db.adminlist
    amount = len(users)
    auth_amt = len(db.auth_codes)

    for i, user in enumerate(users):
        if users[i].admin and user not in admins: 
            db.adminlist.append(user)

    return render_template(
        'dashboard.html',
        admins=len(admins),
        adminlist=admins,
        users= enumerate(users),
        list=users,
        auths=db.auth_codes,
        auth_amt=auth_amt,
        amount=amount,
        version="0.1"
    )

@con.route('/dashboard', methods=['POST'])
def new_auth_code():
    auth = request.form['authcode']
    if len(db.auth_codes) < 6:
        db.auth_codes.append(auth)
    return redirect(url_for('dashboard'))

@con.route('/login', methods=['GET', 'POST'])
def login():
    if request.method == 'POST':
        session.pop('user_id', None)

        username = request.form['username']
        password = request.form['password']

        try:
            user = [u for u in db.userlist if u.username == username][0]
            pwd  = [p for p in db.userlist if p.password == password][0]
        except IndexError:
            return redirect(url_for('login'))

        if user and pwd:
            session['user_id'] = user.id
            return redirect(url_for('dashboard'))

        return redirect(url_for('login'))
    return render_template('login.html')

@con.route('/users/')
@con.route('/users', methods=['GET'])
def display_users():
    if not g.user:
        return redirect(url_for('login'))

    users = db.userlist
    _len  = len(users)

    return render_template(
        'users.html',
        title= 'Connected Machines',
        users= enumerate(users),
        amount=_len,
        list = users,
        plur = "" if _len<2 else "s"
    )

@con.route('/user/<id>')
@con.route('/users/<id>', methods=['GET'])
def user_profile(id):
    if not g.user:
        return redirect(url_for('login'))
    try:
        user = db.userlist[int(id)-1]
        return render_template('user.html', user=user)
    except:
        return "invalid user id"

# currently not working
@con.route('/delAdmin/<int:id>', methods=['GET'])
def deleteadmin(id):
    if not g.user:
        return redirect(url_for('login'))
    if id == 1:
        return f"you cannot delete the default admin account"
    try:
        db.userlist.pop(int(id)-1)

        users = db.userlist
        admins = db.adminlist
        amount = len(users)
        auth_amt = len(db.auth_codes)

        for i, user in enumerate(users):
            if users[i].admin and user not in admins: 
                db.adminlist.append(user)

        return render_template(
            'dashboard.html',
            admins=len(admins),
            adminlist=admins,
            users= enumerate(users),
            list=users,
            auths=db.auth_codes,
            auth_amt=auth_amt,
            amount=amount,
            version="0.1"
        )
        #return redirect(url_for('dashboard'))
    except Exception as e:
        return f"invalid admin id: {e}"


"""
Connector Panel API
"""

@con.route('/api/lookup', methods=['POST'])
def user_lookup():
    try:
        user = db.userlist[int(request.form['uid'])-1]
        return render_template('user.html', user=user)
    except:
        return "invalid user id"

@con.route('/api/adduser', methods=['POST'])
def adduser():
    req = request.get_json()
    auth = request.headers.get("auth")
    username = req['username']
    ip = req['ip']
    pcname = req['pcname']

    if tl.VerifyAuth(auth):
        new_user = tl.AddNewUser(
            username=username,
            ip=ip,
            pcname=pcname
        )
        return f"user added: {new_user}"
    else: return "invalid authorization"

@con.route('/api/addAdmin', methods=['POST'])
def addadmin():
    auth = request.form['auth']
    username = request.form['admin_username']
    password = request.form['admin_password']
    if tl.VerifyAuth(auth):
        new_admin = tl.AddNewUser(
            username=username,
            password=password,
            admin=True
        )
    return redirect(url_for('dashboard'))

""" THESE ONLY WORK IN TESTING MODE """
@con.route('/rndAdmin', methods=['GET'])
def rndadmin():
    if TESTING_MODE:
        username, password = tl.RandomUserInfo()
        new_admin = tl.AddNewUser(
            username=username,
            password=password,
            admin=True,
            bot=True
        )
        return redirect(url_for('dashboard'))
    else: return "this feature only works in testing mode"

@con.route('/rndUser', methods=['GET'])
def rnduser():
    if TESTING_MODE:
        username, password = tl.RandomUserInfo()
        new_admin = tl.AddNewUser(
            username=username,
            password=password,
            bot=True
        )
        return redirect(url_for('dashboard'))
    else: return "this feature only works in testing mode"

if __name__ == '__main__':
    os.system('cls')
    con.run(host='0.0.0.0', port=80)
